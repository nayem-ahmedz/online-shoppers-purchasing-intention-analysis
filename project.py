# -*- coding: utf-8 -*-
"""PDS Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qgs2wl4h3MVShHtYsqKlCz8j28fUOdyu
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plot
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler

# dataset link : https://archive.ics.uci.edu/dataset/468/online+shoppers+purchasing+intention+dataset

df = pd.read_csv('/content/online_shoppers_intention.csv')
df.describe()

df.head()

df.tail()

df.sample(5)

df.info()

df.isnull().sum()

# converting categorical value into numeric values

# One-Hot Encode 'VisitorType' and 'Month'
df = pd.get_dummies(df, columns=['VisitorType', 'Month'], drop_first=True)

# Converting 'Weekend' and 'Revenue' to integer
df['Weekend'] = df['Weekend'].astype(int)
df['Revenue'] = df['Revenue'].astype(int)

df.head()

df.head()

# finding the numerical columns
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Exclude the target variable
numerical_columns = numerical_columns.drop(['Revenue'])

# Initializing the scaler
scaler = MinMaxScaler()

# Fit and transform the numerical columns
df[numerical_columns] = scaler.fit_transform(df[numerical_columns])

df.sample(10)

df['Revenue'].value_counts()

df.corr()

df.columns

# count plot for Months

# Sum each month column to get the count of occurrences
month_counts = df[['Month_Dec', 'Month_Feb', 'Month_Jul', 'Month_June',
                   'Month_Mar', 'Month_May', 'Month_Nov', 'Month_Oct', 'Month_Sep']].sum()

# Prepare the data for plotting
month_counts.index = [month.split('_')[1] for month in month_counts.index]  # Get only the month names
month_counts = month_counts.reindex(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], fill_value=0)  # Ensure all months are listed

# Plotting
sns.barplot(x=month_counts.index, y=month_counts.values)
plot.title('Count of Visits by Month')
plot.xlabel('Month')
plot.ylabel('Count')
plot.show()

# Histogram of columns

df.hist(bins=20,figsize=(10,10))
plot.show()

# Correlation analysis

corrmat=df.corr()
top_corr_features = corrmat.index
plot.figure(figsize=(10,10))

#plot heat map

g = sns.heatmap(df[top_corr_features].corr(), annot=True)

# Target and feature separation
target_name = 'Revenue'
y = df[target_name]
x = df.drop(target_name, axis=1)

x.head()

y.head()

# Train-test split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.8, random_state=1)

"""Classification Algorithm"""

# Random Forest

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

rf = RandomForestClassifier(random_state=1)
rf.fit(x_train, y_train)

# Model Evaluation
train_accuracy = rf.score(x_train, y_train) * 100
test_accuracy = rf.score(x_test, y_test) * 100

print("Train Accuracy of Random Forest:", train_accuracy)
print("Test Accuracy of Random Forest:", test_accuracy)

y_pred = rf.predict(x_test)
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
